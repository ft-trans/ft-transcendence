services:
  app:
    build:
      context: .
      dockerfile: deploy/Dockerfile.app
      target: production
      args:
        DATABASE_URL: ${DATABASE_URL}
        VITE_API_URL: ${VITE_API_URL}
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      NODE_ENV: production
      ELASTIC_CA: /app/certs/ca/ca.crt
      ELASTIC_URL: ${ELASTIC_URL}
      ELASTIC_USER: ${ELASTIC_USER}
    secrets:
      - elasticsearch_password
    networks:
      - transcendence_net
      - elk_net
    # TODO 提出前に削除, metrics確認用
    ports:
      - "9464:9464"
    depends_on:
      setup-elasticsearch:
        condition: service_completed_successfully
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - prisma:/app/dist/prisma
      - certs:/app/certs:ro
    # TODO 提出前にコメントアウトを外す
    # restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  nginx:
    build:
      context: .
      dockerfile: deploy/Dockerfile.nginx
      target: production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx-logs:/var/log/nginx
    networks:
      - transcendence_net
    depends_on:
      app:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis:8.0.2
    # TODO 提出前にports削除
    ports:
      - "6379:6379"
    volumes:
      - redis:/data
    networks:
      - transcendence_net
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  prometheus:
    build:
      context: ./deploy/prometheus
      dockerfile: Dockerfile.prometheus
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - 'prometheus-data:/prometheus'
    networks:
      - transcendence_net

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter
    command:
      - "--nginx.scrape-uri=http://nginx:8080/stub_status"
    ports:
      - "9113:9113"
    depends_on:
      nginx:
        condition: service_started
    networks:
      - transcendence_net

  redis-exporter:
    image: oliver006/redis_exporter:v1.61.0
    command: ["--redis.addr=redis://redis:6379"]
    ports:
      - "9121:9121"
    networks:
      - transcendence_net

  grafana:
    build:
      context: ./deploy/grafana
      dockerfile: Dockerfile.grafana
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_admin_password
      - GF_AUTH_ANONYMOUS_ENABLED=false
    secrets:
      - grafana_admin_password
    ports:
      - '4000:3000'
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - transcendence_net

  elasticsearch:
    build:
      context: ./deploy/elk/elasticsearch
      dockerfile: Dockerfile.elasticsearch
      args:
        STACK_VERSION: ${STACK_VERSION}
    environment:
      ELASTIC_PASSWORD_FILE: /run/secrets/elasticsearch_password
      node.store.allow_mmap: "false"
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - 127.0.0.1:${ELASTIC_PORT}:9200
    secrets:
      - elasticsearch_password
    volumes:
      - certs:/usr/share/elasticsearch/config/certs:ro
      - elasticsearch-data:/usr/share/elasticsearch/data
    mem_limit: "1g" 
    ulimits: {}
    networks: [elk_net]
    depends_on:
      setup-certs:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL","curl -fsS --cacert config/certs/ca/ca.crt -u elastic:$(cat /run/secrets/elasticsearch_password) https://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s >/dev/null"]
      interval: 10s
      timeout: 10s
      retries: 120
 
  kibana:
    build:
      context: ./deploy/elk/kibana
      dockerfile: Dockerfile.kibana
      args:
        STACK_VERSION: ${STACK_VERSION}
    environment:
      ELASTIC_URL: ${ELASTIC_URL}
      KIBANA_USER: ${KIBANA_USER}
      NODE_OPTIONS: "--max-old-space-size=512"
    ports:
      - "127.0.0.1:${KIBANA_PORT}:5601"
    secrets:
      - kibana_password
      - kbn_security_key
      - kbn_eso_key
      - kbn_reporting_key
    volumes:
      - certs:/usr/share/kibana/config/certs:ro
      - kibana-data:/usr/share/kibana/data
    mem_limit: "1g"
    networks: [elk_net]
    depends_on:
      setup-elasticsearch:
        condition: service_completed_successfully
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL","curl -fsS --cacert config/certs/ca/ca.crt https://localhost:5601/api/status | grep -q '\"level\":\"available\"'"]
      interval: 10s
      timeout: 10s
      retries: 120

  logstash:
    build:
      context: ./deploy/elk/logstash
      dockerfile: Dockerfile.logstash
      args:
        STACK_VERSION: ${STACK_VERSION}
    environment:
      ELASTIC_URL: ${ELASTIC_URL}
      ELASTIC_USER: ${ELASTIC_USER}
      LS_JAVA_OPTS: "-Xms256m -Xmx256m"
    secrets:
      - elasticsearch_password
    volumes:
      - certs:/usr/share/logstash/config/certs:ro
      - logstash-data:/usr/share/logstash/data
      - nginx-logs:/usr/share/logstash/nginx:ro
    mem_limit: "1g"
    depends_on:
      setup-elasticsearch:
        condition: service_completed_successfully
      elasticsearch:
        condition: service_healthy
    networks: [elk_net]
    healthcheck:
      test: ["CMD-SHELL","curl -fsS http://localhost:9600/_node/pipelines | grep -q '\"pipelines\"'"]
      interval: 10s
      timeout: 10s
      retries: 120

  setup-certs:
    build:
      context: ./deploy/elk/setup-certs
      dockerfile: Dockerfile.setup-certs
      args:
        STACK_VERSION: ${STACK_VERSION}
    restart: "no"
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    networks: [elk_net]
  
  setup-elasticsearch:
    build:
      context: ./deploy/elk/setup-elasticsearch
      dockerfile: Dockerfile.setup-elasticsearch
      args:
        STACK_VERSION: ${STACK_VERSION}
    restart: "no"
    environment:
      ELASTIC_URL: ${ELASTIC_URL}
      ELASTIC_USER: ${ELASTIC_USER}
      KIBANA_USER: ${KIBANA_USER}
    secrets:
      - elasticsearch_password
      - kibana_password
    volumes:
      - certs:/usr/share/elasticsearch/config/certs:ro
    networks: [elk_net]
    depends_on:
      elasticsearch: 
        condition: service_healthy

  setup-kibana:
    build:
      context: ./deploy/elk/setup-kibana
      dockerfile: Dockerfile.setup-kibana
    restart: "no"
    environment:
      ELASTIC_USER: ${ELASTIC_USER}
      KIBANA_URL: ${KIBANA_URL}
    secrets:
      - elasticsearch_password
    volumes:
      - certs:/certs:ro
    networks: [elk_net]
    depends_on:
      elasticsearch: 
        condition: service_healthy
      kibana:
        condition: service_healthy

volumes:
  redis:
  prisma:
  prometheus-data:
  grafana-data:
  certs:
  elasticsearch-data:
  logstash-data:
  kibana-data:
  nginx-logs:

secrets:
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt
  elasticsearch_password:
    file: ./secrets/elasticsearch_password.txt
  kibana_password:
    file: ./secrets/kibana_password.txt
  kbn_security_key:
    file: ./secrets/kbn_security_key.txt
  kbn_eso_key:
    file: ./secrets/kbn_eso_key.txt
  kbn_reporting_key:
    file: ./secrets/kbn_reporting_key.txt

networks:
  transcendence_net: {}
  elk_net: {}
