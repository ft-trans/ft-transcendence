// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/infra/database/generated"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id
  email           String    @unique
  username        String    @unique
  avatar          String    @default("")
  passwordDigest  String
  status          String    @default("offline") // "online" or "offline"
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Session management for multiple devices
  sessions Session[]

  // Friendship relations
  sentFriendRequests     Friendship[] @relation("Requester")
  receivedFriendRequests Friendship[] @relation("Receiver")

  // DirectMessage relations
  sentMessages     DirectMessage[] @relation("Sender")
  receivedMessages DirectMessage[] @relation("Receiver")

  // Match relations
  matchParticipants MatchParticipant[]

  // MatchHistory relations
  wonMatches  MatchHistory[] @relation("Winner")
  lostMatches MatchHistory[] @relation("Loser")

  // Tournament relations
  organizedTournaments Tournament[] @relation("TournamentOrganizer")
  tournamentParticipations TournamentParticipant[]
}

model Friendship {
  requesterId String
  receiverId  String
  status      String // "pending", "accepted", "blocked"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requester User @relation("Requester", fields: [requesterId], references: [id], onDelete: Cascade)
  receiver  User @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@id([requesterId, receiverId])
}

model DirectMessage {
  id         String   @id
  senderId   String
  receiverId String
  content    String
  isRead     Boolean  @default(false)
  sentAt     DateTime @default(now())

  sender   User @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Match {
  id        String   @id
  status    String // "in_progress", "completed"
  gameType  String   @default("Pong")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants    MatchParticipant[]
  history         MatchHistory?
  tournamentMatch TournamentMatch?
}

// MatchとUserの多対多を表現する中間テーブル
model MatchParticipant {
  matchId String
  userId  String

  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([matchId, userId])
}

model MatchHistory {
  id          String   @id
  matchId     String   @unique
  winnerId    String
  loserId     String
  winnerScore Int
  loserScore  Int
  playedAt    DateTime @default(now())

  match  Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  winner User @relation("Winner", fields: [winnerId], references: [id], onDelete: Cascade)
  loser  User @relation("Loser", fields: [loserId], references: [id], onDelete: Cascade)
}

model Session {
  id          String   @id
  userId      String
  tokenDigest String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tournament {
  id              String   @id
  name            String   @default("")
  description     String?
  organizerId     String
  status          String   @default("registration") // "registration", "in_progress", "completed", "cancelled"
  maxParticipants Int      @default(5)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  organizer    User                    @relation("TournamentOrganizer", fields: [organizerId], references: [id], onDelete: Cascade)
  participants TournamentParticipant[]
  rounds       TournamentRound[]
  matches      TournamentMatch[]
}

model TournamentParticipant {
  id           String @id
  tournamentId String
  userId       String
  status       String @default("active") // "active", "eliminated", "withdrawn"

  tournament Tournament                    @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user       User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  matches    TournamentMatchParticipant[]

  @@unique([tournamentId, userId])
}

model TournamentRound {
  id           String   @id
  tournamentId String
  roundNumber  Int
  status       String   @default("pending") // "pending", "in_progress", "completed"
  createdAt    DateTime @default(now())

  tournament Tournament        @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  matches    TournamentMatch[]

  @@unique([tournamentId, roundNumber])
}

model TournamentMatch {
  id           String   @id
  tournamentId String
  roundId      String
  matchId      String?  @unique // 既存のMatchテーブルとの関連
  winnerId     String?  // TournamentParticipantのID
  status       String   @default("pending") // "pending", "in_progress", "completed"
  createdAt    DateTime @default(now())

  tournament   Tournament                   @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  round        TournamentRound              @relation(fields: [roundId], references: [id], onDelete: Cascade)
  match        Match?                       @relation(fields: [matchId], references: [id], onDelete: Cascade)
  participants TournamentMatchParticipant[]
}

model TournamentMatchParticipant {
  matchId       String
  participantId String

  match       TournamentMatch       @relation(fields: [matchId], references: [id], onDelete: Cascade)
  participant TournamentParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@id([matchId, participantId])
}
